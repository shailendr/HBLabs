<!--
	
	This library is free software; you can redistribute it and/or modify it under
	the terms of the GNU Lesser General Public License as published by the Free
	Software Foundation; either version 2.1 of the License, or (at your option)
	any later version.

	This library is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
	details.
	
  	~ See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
  -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
    	<!-- Database connection settings -->
    	<!-- set database driver  -->
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        
        <!-- given the connection url  -->
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/hdb</property>
       
        <!-- given the credentials -->
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">root</property>
        
        <!-- 
            hibernate.hbm2ddl.auto property attributes            
        	e.g. validate | update | create | create-drop
        	
        	validate ->
        		validate option will validates the database schema structure of the table.
        		if there is any mismatch in the table schema and the Entity class, then HB
        		will throw the exception.
        	
        	update ->
        		update option will update the table schema if table is not present then it will
        		create a fresh table schema structure.
        		
        	create ->
        		A value of create will create your tables at sessionFactory creation, and
        		leave them intact.if the table is already present then create statement will
        		delete the old table schema and create the fresh table structure.
        		
        	create-drop ->
				Automatically validates or exports schema DDL to the database when the
				SessionFactory is created. With create-drop, the database schema will be
				dropped when the SessionFactory is closed explicitly.
			
		-->
		<property name="hibernate.hbm2ddl.auto">update</property>
		
		<!-- 
			SQL dialect
		 -->
		<property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
		
		<property name="hibernate.current_session_context_class">thread</property>
		
		<!-- Echo all executed SQL to console -->
        <!-- <property name="show_sql">true</property>  -->
		
		<!-- Future use property -->
		<!--
	        <property name="hibernate.cache.use_query_cache">true</property>
	        <property name="hibernate.cache.region_prefix">hibernate.test</property>
	        <property name="hibernate.jdbc.use_streams_for_binary">true</property>
	        <property name="hibernate.jdbc.batch_size">0</property>
	        <property name="hibernate.max_fetch_depth">3</property>
	        
	        

	        <property name="hibernate.generate_statistics">true</property>
	        <property name="test-assertable-setting">value</property>
	        <property name="hibernate.cache.region.factory_class">org.hibernate.testing.cache.CachingRegionFactory</property>
	        
	        <mapping class="org.hibernate.jpa.test.Item"/>
	        <mapping class="org.hibernate.jpa.test.Cat"/>
	        <mapping class="org.hibernate.jpa.test.Kitten"/>
	        <mapping class="org.hibernate.jpa.test.Distributor"/>
	        
	        <class-cache class="org.hibernate.jpa.test.Item" usage="read-write"/>
	        <collection-cache collection="org.hibernate.jpa.test.Item.distributors" usage="read-write" region="RegionName"/>
	        <event type="pre-insert"/>
		-->
        
    </session-factory>
</hibernate-configuration>